
AVRASM ver. 2.1.30  D:\Work\AVR\Projects\Sensor\Debug\List\Sensor.asm Sun May 27 13:16:17 2018

D:\Work\AVR\Projects\Sensor\Debug\List\Sensor.asm(1087): warning: Register r5 already defined by the .DEF directive
D:\Work\AVR\Projects\Sensor\Debug\List\Sensor.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\Work\AVR\Projects\Sensor\Debug\List\Sensor.asm(1089): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0089 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 6d45
00002b 6461
00002c 4b20
00002d 7661      	.DB  0x45,0x6D,0x61,0x64,0x20,0x4B,0x61,0x76
00002e 6f6f
00002f 6973
000030 3900
000031 3134      	.DB  0x6F,0x6F,0x73,0x69,0x0,0x39,0x34,0x31
000032 3034
000033 3132
000034 3532
000035 4800      	.DB  0x34,0x30,0x32,0x31,0x32,0x35,0x0,0x48
000036 736f
000037 6973
000038 6e65
000039 4820      	.DB  0x6F,0x73,0x73,0x69,0x65,0x6E,0x20,0x48
00003a 7361
00003b 6568
00003c 696d
00003d 3900      	.DB  0x61,0x73,0x68,0x65,0x6D,0x69,0x0,0x39
00003e 3134
00003f 3034
000040 3132
000041 3433      	.DB  0x34,0x31,0x34,0x30,0x32,0x31,0x33,0x34
000042 4800
000043 6d61
000044 6469
000045 4e20      	.DB  0x0,0x48,0x61,0x6D,0x69,0x64,0x20,0x4E
000046 7361
000047 0072
000048 3439
000049 3431      	.DB  0x61,0x73,0x72,0x0,0x39,0x34,0x31,0x34
00004a 3230
00004b 3931
00004c 0031
00004d 6146      	.DB  0x30,0x32,0x31,0x39,0x31,0x0,0x46,0x61
00004e 6972
00004f 6162
000050 4d20
000051 686f      	.DB  0x72,0x69,0x62,0x61,0x20,0x4D,0x6F,0x68
000052 6d61
000053 616d
000054 6964
000055 3900      	.DB  0x61,0x6D,0x6D,0x61,0x64,0x69,0x0,0x39
000056 3133
000057 3134
000058 3139
000059 3934      	.DB  0x33,0x31,0x34,0x31,0x39,0x31,0x34,0x39
00005a 7300
00005b 6174
00005c 7472
00005d 7400      	.DB  0x0,0x73,0x74,0x61,0x72,0x74,0x0,0x74
00005e 6d65
00005f 6570
000060 7574
000061 6572      	.DB  0x65,0x6D,0x70,0x65,0x74,0x75,0x72,0x65
000062 003d      	.DB  0x3D,0x0
                 _0x2000060:
D:\Work\AVR\Projects\Sensor\Debug\List\Sensor.asm(1137): warning: .cseg .db misalignment - padding zero byte
000063 0001      	.DB  0x1
                 _0x2000000:
000064 4e2d
000065 4e41
000066 4900
000067 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Work\AVR\Projects\Sensor\Debug\List\Sensor.asm(1140): warning: .cseg .db misalignment - padding zero byte
000068 0000      	.DB  0x0
                 _0x2020003:
000069 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00006a 000d      	.DW  0x0D
00006b 0260      	.DW  _0x6
00006c 0054      	.DW  _0x0*2
                 
00006d 000a      	.DW  0x0A
00006e 026d      	.DW  _0x6+13
00006f 0061      	.DW  _0x0*2+13
                 
000070 0010      	.DW  0x10
000071 0277      	.DW  _0x6+23
000072 006b      	.DW  _0x0*2+23
                 
000073 000a      	.DW  0x0A
000074 0287      	.DW  _0x6+39
000075 007b      	.DW  _0x0*2+39
                 
000076 000b      	.DW  0x0B
000077 0291      	.DW  _0x6+49
000078 0085      	.DW  _0x0*2+49
                 
000079 000a      	.DW  0x0A
00007a 029c      	.DW  _0x6+60
00007b 0090      	.DW  _0x0*2+60
                 
00007c 0011      	.DW  0x11
00007d 02a6      	.DW  _0x6+70
00007e 009a      	.DW  _0x0*2+70
                 
00007f 000a      	.DW  0x0A
000080 02b7      	.DW  _0x6+87
000081 00ab      	.DW  _0x0*2+87
                 
000082 0001      	.DW  0x01
000083 02c1      	.DW  __seed_G100
000084 00c6      	.DW  _0x2000060*2
                 
000085 0002      	.DW  0x02
000086 02c5      	.DW  __base_y_G101
000087 00d2      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000088 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000089 94f8      	CLI
00008a 27ee      	CLR  R30
00008b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00008c e0f1      	LDI  R31,1
00008d bff5      	OUT  MCUCR,R31
00008e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00008f e08d      	LDI  R24,(14-2)+1
000090 e0a2      	LDI  R26,2
000091 27bb      	CLR  R27
                 __CLEAR_REG:
000092 93ed      	ST   X+,R30
000093 958a      	DEC  R24
000094 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000095 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000096 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000097 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000098 93ed      	ST   X+,R30
000099 9701      	SBIW R24,1
00009a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00009b ede4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00009c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00009d 9185      	LPM  R24,Z+
00009e 9195      	LPM  R25,Z+
00009f 9700      	SBIW R24,0
0000a0 f061      	BREQ __GLOBAL_INI_END
0000a1 91a5      	LPM  R26,Z+
0000a2 91b5      	LPM  R27,Z+
0000a3 9005      	LPM  R0,Z+
0000a4 9015      	LPM  R1,Z+
0000a5 01bf      	MOVW R22,R30
0000a6 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a7 9005      	LPM  R0,Z+
0000a8 920d      	ST   X+,R0
0000a9 9701      	SBIW R24,1
0000aa f7e1      	BRNE __GLOBAL_INI_LOOP
0000ab 01fb      	MOVW R30,R22
0000ac cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ad e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000ae bfed      	OUT  SPL,R30
0000af e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b0 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b1 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b2 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b3 940c 0125 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <alcd.h>
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
                 ;
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0009 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 000A     ADMUX=adc_input | ADC_VREF_TYPE;
0000b5 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000b6 81e8      	LD   R30,Y
0000b7 66e0      	ORI  R30,LOW(0x60)
0000b8 b9e7      	OUT  0x7,R30
                 ; 0000 000B     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 000C     delay_us(10);
                +
0000b9 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000ba 958a     +DEC R24
0000bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 000D     // Start the AD conversion
                 ; 0000 000E     ADCSRA|=(1<<ADSC);
0000bc 9a36      	SBI  0x6,6
                 ; 0000 000F     // Wait for the AD conversion to complete
                 ; 0000 0010     while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
0000bd 9b34      	SBIS 0x6,4
0000be cffe      	RJMP _0x3
                 ; 0000 0011     ADCSRA|=(1<<ADIF);
0000bf 9a34      	SBI  0x6,4
                 ; 0000 0012     return ADCH;
0000c0 b1e5      	IN   R30,0x5
0000c1 940c 02c5 	JMP  _0x20A0002
                 ; 0000 0013 }
                 ; .FEND
                 ;
                 ;void init() {
                 ; 0000 0015 void init() {
                 _init:
                 ; .FSTART _init
                 ; 0000 0016 
                 ; 0000 0017     // Declare your local variables here
                 ; 0000 0018 
                 ; 0000 0019     // Input/Output Ports initialization
                 ; 0000 001A     // Port A initialization
                 ; 0000 001B     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001C     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 bbea      	OUT  0x1A,R30
                 ; 0000 001D     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 001E     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000c5 bbeb      	OUT  0x1B,R30
                 ; 0000 001F 
                 ; 0000 0020     // Port B initialization
                 ; 0000 0021     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0022     DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000c6 efef      	LDI  R30,LOW(255)
0000c7 bbe7      	OUT  0x17,R30
                 ; 0000 0023     // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0024     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 bbe8      	OUT  0x18,R30
                 ; 0000 0025 
                 ; 0000 0026     // Port C initialization
                 ; 0000 0027     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0028     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000ca bbe4      	OUT  0x14,R30
                 ; 0000 0029     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002A     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000cb bbe5      	OUT  0x15,R30
                 ; 0000 002B 
                 ; 0000 002C     // Port D initialization
                 ; 0000 002D     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002E     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000cc bbe1      	OUT  0x11,R30
                 ; 0000 002F     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0030     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000cd bbe2      	OUT  0x12,R30
                 ; 0000 0031 
                 ; 0000 0032     // Timer/Counter 0 initialization
                 ; 0000 0033     // Clock source: System Clock
                 ; 0000 0034     // Clock value: Timer 0 Stopped
                 ; 0000 0035     // Mode: Normal top=0xFF
                 ; 0000 0036     // OC0 output: Disconnected
                 ; 0000 0037     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000ce bfe3      	OUT  0x33,R30
                 ; 0000 0038     TCNT0=0x00;
0000cf bfe2      	OUT  0x32,R30
                 ; 0000 0039     OCR0=0x00;
0000d0 bfec      	OUT  0x3C,R30
                 ; 0000 003A 
                 ; 0000 003B     // Timer/Counter 1 initialization
                 ; 0000 003C     // Clock source: System Clock
                 ; 0000 003D     // Clock value: Timer1 Stopped
                 ; 0000 003E     // Mode: Normal top=0xFFFF
                 ; 0000 003F     // OC1A output: Disconnected
                 ; 0000 0040     // OC1B output: Disconnected
                 ; 0000 0041     // Noise Canceler: Off
                 ; 0000 0042     // Input Capture on Falling Edge
                 ; 0000 0043     // Timer1 Overflow Interrupt: Off
                 ; 0000 0044     // Input Capture Interrupt: Off
                 ; 0000 0045     // Compare A Match Interrupt: Off
                 ; 0000 0046     // Compare B Match Interrupt: Off
                 ; 0000 0047     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000d1 bdef      	OUT  0x2F,R30
                 ; 0000 0048     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000d2 bdee      	OUT  0x2E,R30
                 ; 0000 0049     TCNT1H=0x00;
0000d3 bded      	OUT  0x2D,R30
                 ; 0000 004A     TCNT1L=0x00;
0000d4 bdec      	OUT  0x2C,R30
                 ; 0000 004B     ICR1H=0x00;
0000d5 bde7      	OUT  0x27,R30
                 ; 0000 004C     ICR1L=0x00;
0000d6 bde6      	OUT  0x26,R30
                 ; 0000 004D     OCR1AH=0x00;
0000d7 bdeb      	OUT  0x2B,R30
                 ; 0000 004E     OCR1AL=0x00;
0000d8 bdea      	OUT  0x2A,R30
                 ; 0000 004F     OCR1BH=0x00;
0000d9 bde9      	OUT  0x29,R30
                 ; 0000 0050     OCR1BL=0x00;
0000da bde8      	OUT  0x28,R30
                 ; 0000 0051 
                 ; 0000 0052     // Timer/Counter 2 initialization
                 ; 0000 0053     // Clock source: System Clock
                 ; 0000 0054     // Clock value: Timer2 Stopped
                 ; 0000 0055     // Mode: Normal top=0xFF
                 ; 0000 0056     // OC2 output: Disconnected
                 ; 0000 0057     ASSR=0<<AS2;
0000db bde2      	OUT  0x22,R30
                 ; 0000 0058     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000dc bde5      	OUT  0x25,R30
                 ; 0000 0059     TCNT2=0x00;
0000dd bde4      	OUT  0x24,R30
                 ; 0000 005A     OCR2=0x00;
0000de bde3      	OUT  0x23,R30
                 ; 0000 005B 
                 ; 0000 005C     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 005D     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000df bfe9      	OUT  0x39,R30
                 ; 0000 005E 
                 ; 0000 005F     // External Interrupt(s) initialization
                 ; 0000 0060     // INT0: Off
                 ; 0000 0061     // INT1: Off
                 ; 0000 0062     // INT2: Off
                 ; 0000 0063     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000e0 bfe5      	OUT  0x35,R30
                 ; 0000 0064     MCUCSR=(0<<ISC2);
0000e1 bfe4      	OUT  0x34,R30
                 ; 0000 0065 
                 ; 0000 0066     // USART initialization
                 ; 0000 0067     // USART disabled
                 ; 0000 0068     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000e2 b9ea      	OUT  0xA,R30
                 ; 0000 0069 
                 ; 0000 006A     // Analog Comparator initialization
                 ; 0000 006B     // Analog Comparator: Off
                 ; 0000 006C     // The Analog Comparator's positive input is
                 ; 0000 006D     // connected to the AIN0 pin
                 ; 0000 006E     // The Analog Comparator's negative input is
                 ; 0000 006F     // connected to the AIN1 pin
                 ; 0000 0070     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000e3 e8e0      	LDI  R30,LOW(128)
0000e4 b9e8      	OUT  0x8,R30
                 ; 0000 0071 
                 ; 0000 0072     // ADC initialization
                 ; 0000 0073     // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0074     // ADC Voltage Reference: AREF pin
                 ; 0000 0075     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0076     // Only the 8 most significant bits of
                 ; 0000 0077     // the AD conversion result are used
                 ; 0000 0078     ADMUX=ADC_VREF_TYPE;
0000e5 e6e0      	LDI  R30,LOW(96)
0000e6 b9e7      	OUT  0x7,R30
                 ; 0000 0079     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000e7 e8e3      	LDI  R30,LOW(131)
0000e8 b9e6      	OUT  0x6,R30
                 ; 0000 007A     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000e9 e0e0      	LDI  R30,LOW(0)
0000ea bfe0      	OUT  0x30,R30
                 ; 0000 007B 
                 ; 0000 007C     // SPI initialization
                 ; 0000 007D     // SPI disabled
                 ; 0000 007E     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000eb b9ed      	OUT  0xD,R30
                 ; 0000 007F 
                 ; 0000 0080     // TWI initialization
                 ; 0000 0081     // TWI disabled
                 ; 0000 0082     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000ec bfe6      	OUT  0x36,R30
                 ; 0000 0083 
                 ; 0000 0084     // Alphanumeric LCD initialization
                 ; 0000 0085     // Connections are specified in the
                 ; 0000 0086     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0087     // RS - PORTB Bit 0
                 ; 0000 0088     // RD - PORTB Bit 1
                 ; 0000 0089     // EN - PORTB Bit 2
                 ; 0000 008A     // D4 - PORTB Bit 4
                 ; 0000 008B     // D5 - PORTB Bit 5
                 ; 0000 008C     // D6 - PORTB Bit 6
                 ; 0000 008D     // D7 - PORTB Bit 7
                 ; 0000 008E     // Characters/line: 16
                 ; 0000 008F     lcd_init(16);
0000ed e1a0      	LDI  R26,LOW(16)
0000ee 940e 0299 	CALL _lcd_init
                 ; 0000 0090 
                 ; 0000 0091 }
0000f0 9508      	RET
                 ; .FEND
                 ;
                 ;void printName(char *name, char *studentId) {
                 ; 0000 0093 void printName(char *name, char *studentId) {
                 _printName:
                 ; .FSTART _printName
                 ; 0000 0094     lcd_clear();
0000f1 93ba      	ST   -Y,R27
0000f2 93aa      	ST   -Y,R26
                 ;	*name -> Y+2
                 ;	*studentId -> Y+0
0000f3 940e 0256 	CALL _lcd_clear
                 ; 0000 0095     lcd_puts(name);
0000f5 81aa      	LDD  R26,Y+2
0000f6 81bb      	LDD  R27,Y+2+1
0000f7 940e 0277 	CALL _lcd_puts
                 ; 0000 0096     lcd_gotoxy(0,1);
0000f9 e0e0      	LDI  R30,LOW(0)
0000fa 93ea      	ST   -Y,R30
0000fb e0a1      	LDI  R26,LOW(1)
0000fc 940e 0249 	CALL _lcd_gotoxy
                 ; 0000 0097     lcd_puts(studentId);
0000fe 81a8      	LD   R26,Y
0000ff 81b9      	LDD  R27,Y+1
000100 940e 0277 	CALL _lcd_puts
                 ; 0000 0098 
                 ; 0000 0099     delay_ms(2000);
000102 eda0      	LDI  R26,LOW(2000)
000103 e0b7      	LDI  R27,HIGH(2000)
000104 940e 0366 	CALL _delay_ms
                 ; 0000 009A }
000106 940c 030d 	JMP  _0x20A0001
                 ; .FEND
                 ;
                 ;void printNames() {
                 ; 0000 009C void printNames() {
                 _printNames:
                 ; .FSTART _printNames
                 ; 0000 009D     printName("Emad Kavoosi", "941402125");
                +
000108 e6e0     +LDI R30 , LOW ( _0x6 + ( 0 ) )
000109 e0f2     +LDI R31 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW1MN _0x6,0
00010a 93fa      	ST   -Y,R31
00010b 93ea      	ST   -Y,R30
                +
00010c e6ad     +LDI R26 , LOW ( _0x6 + ( 13 ) )
00010d e0b2     +LDI R27 , HIGH ( _0x6 + ( 13 ) )
                 	__POINTW2MN _0x6,13
00010e dfe2      	RCALL _printName
                 ; 0000 009E     printName("Hossien Hashemi", "941402134");
                +
00010f e7e7     +LDI R30 , LOW ( _0x6 + ( 23 ) )
000110 e0f2     +LDI R31 , HIGH ( _0x6 + ( 23 ) )
                 	__POINTW1MN _0x6,23
000111 93fa      	ST   -Y,R31
000112 93ea      	ST   -Y,R30
                +
000113 e8a7     +LDI R26 , LOW ( _0x6 + ( 39 ) )
000114 e0b2     +LDI R27 , HIGH ( _0x6 + ( 39 ) )
                 	__POINTW2MN _0x6,39
000115 dfdb      	RCALL _printName
                 ; 0000 009F     printName("Hamid Nasr", "941402191");
                +
000116 e9e1     +LDI R30 , LOW ( _0x6 + ( 49 ) )
000117 e0f2     +LDI R31 , HIGH ( _0x6 + ( 49 ) )
                 	__POINTW1MN _0x6,49
000118 93fa      	ST   -Y,R31
000119 93ea      	ST   -Y,R30
                +
00011a e9ac     +LDI R26 , LOW ( _0x6 + ( 60 ) )
00011b e0b2     +LDI R27 , HIGH ( _0x6 + ( 60 ) )
                 	__POINTW2MN _0x6,60
00011c dfd4      	RCALL _printName
                 ; 0000 00A0     printName("Fariba Mohammadi", "931419149");
                +
00011d eae6     +LDI R30 , LOW ( _0x6 + ( 70 ) )
00011e e0f2     +LDI R31 , HIGH ( _0x6 + ( 70 ) )
                 	__POINTW1MN _0x6,70
00011f 93fa      	ST   -Y,R31
000120 93ea      	ST   -Y,R30
                +
000121 eba7     +LDI R26 , LOW ( _0x6 + ( 87 ) )
000122 e0b2     +LDI R27 , HIGH ( _0x6 + ( 87 ) )
                 	__POINTW2MN _0x6,87
000123 dfcd      	RCALL _printName
                 ; 0000 00A1 }
000124 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000260           	.BYTE 0x61
                 ;
                 ;void main(void)
                 ; 0000 00A4 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 00A5     float temp;
                 ; 0000 00A6     char temp1[10];
                 ; 0000 00A7     init();
000125 972e      	SBIW R28,14
                 ;	temp -> Y+10
                 ;	temp1 -> Y+0
000126 df9c      	RCALL _init
                 ; 0000 00A8     lcd_putsf("start");
                +
000127 eba5     +LDI R26 , LOW ( 2 * _0x0 + ( 97 ) )
000128 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 97 ) )
                 	__POINTW2FN _0x0,97
000129 940e 0286 	CALL _lcd_putsf
                 ; 0000 00A9 
                 ; 0000 00AA     printNames();
00012b dfdc      	RCALL _printNames
                 ; 0000 00AB 
                 ; 0000 00AC     while (1)
                 _0x7:
                 ; 0000 00AD     {
                 ; 0000 00AE         lcd_clear();
00012c 940e 0256 	CALL _lcd_clear
                 ; 0000 00AF 
                 ; 0000 00B0         temp=read_adc(0);
00012e e0a0      	LDI  R26,LOW(0)
00012f df85      	RCALL _read_adc
000130 27ff      	CLR  R31
000131 2766      	CLR  R22
000132 2777      	CLR  R23
000133 940e 03dc 	CALL __CDF1
                +
000135 87ea     +STD Y + 10 , R30
000136 87fb     +STD Y + 10 + 1 , R31
000137 876c     +STD Y + 10 + 2 , R22
000138 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
                 ; 0000 00B1         temp=temp/.56;
                +
000139 85aa     +LDD R26 , Y + 10
00013a 85bb     +LDD R27 , Y + 10 + 1
00013b 858c     +LDD R24 , Y + 10 + 2
00013c 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
                +
00013d e2e9     +LDI R30 , LOW ( 0x3F0F5C29 )
00013e e5fc     +LDI R31 , HIGH ( 0x3F0F5C29 )
00013f e06f     +LDI R22 , BYTE3 ( 0x3F0F5C29 )
000140 e37f     +LDI R23 , BYTE4 ( 0x3F0F5C29 )
                 	__GETD1N 0x3F0F5C29
000141 940e 04b4 	CALL __DIVF21
                +
000143 87ea     +STD Y + 10 , R30
000144 87fb     +STD Y + 10 + 1 , R31
000145 876c     +STD Y + 10 + 2 , R22
000146 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
                 ; 0000 00B2         lcd_putsf("tempeture=");
                +
000147 ebab     +LDI R26 , LOW ( 2 * _0x0 + ( 103 ) )
000148 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 103 ) )
                 	__POINTW2FN _0x0,103
000149 940e 0286 	CALL _lcd_putsf
                 ; 0000 00B3         ftoa(temp,1,temp1);
                +
00014b 85ea     +LDD R30 , Y + 10
00014c 85fb     +LDD R31 , Y + 10 + 1
00014d 856c     +LDD R22 , Y + 10 + 2
00014e 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
00014f 940e 053b 	CALL __PUTPARD1
000151 e0e1      	LDI  R30,LOW(1)
000152 93ea      	ST   -Y,R30
000153 01de      	MOVW R26,R28
000154 9615      	ADIW R26,5
000155 940e 015c 	CALL _ftoa
                 ; 0000 00B4         lcd_puts(temp1);
000157 01de      	MOVW R26,R28
000158 940e 0277 	CALL _lcd_puts
                 ; 0000 00B5     }
00015a cfd1      	RJMP _0x7
                 ; 0000 00B6 }
                 _0xA:
00015b cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
00015c 93ba      	ST   -Y,R27
00015d 93aa      	ST   -Y,R26
00015e 9724      	SBIW R28,4
00015f e0e0      	LDI  R30,LOW(0)
000160 83e8      	ST   Y,R30
000161 83e9      	STD  Y+1,R30
000162 83ea      	STD  Y+2,R30
000163 e3ef      	LDI  R30,LOW(63)
000164 83eb      	STD  Y+3,R30
000165 931a      	ST   -Y,R17
000166 930a      	ST   -Y,R16
000167 85eb      	LDD  R30,Y+11
000168 85fc      	LDD  R31,Y+11+1
000169 3fef      	CPI  R30,LOW(0xFFFF)
00016a efaf      	LDI  R26,HIGH(0xFFFF)
00016b 07fa      	CPC  R31,R26
00016c f439      	BRNE _0x200000D
00016d 940e 031c 	CALL SUBOPT_0x0
                +
00016f eca8     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
000170 e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
000171 940e 030f 	CALL _strcpyf
000173 c0b1      	RJMP _0x20A0005
                 _0x200000D:
000174 3fef      	CPI  R30,LOW(0x7FFF)
000175 e7af      	LDI  R26,HIGH(0x7FFF)
000176 07fa      	CPC  R31,R26
000177 f439      	BRNE _0x200000C
000178 940e 031c 	CALL SUBOPT_0x0
                +
00017a eca9     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
00017b e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
00017c 940e 030f 	CALL _strcpyf
00017e c0a6      	RJMP _0x20A0005
                 _0x200000C:
00017f 85ac      	LDD  R26,Y+12
000180 23aa      	TST  R26
000181 f462      	BRPL _0x200000F
                +
000182 85e9     +LDD R30 , Y + 9
000183 85fa     +LDD R31 , Y + 9 + 1
000184 856b     +LDD R22 , Y + 9 + 2
000185 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000186 940e 0370 	CALL __ANEGF1
000188 940e 0321 	CALL SUBOPT_0x1
00018a 940e 0326 	CALL SUBOPT_0x2
00018c e2ed      	LDI  R30,LOW(45)
00018d 93ec      	ST   X,R30
                 _0x200000F:
00018e 85a8      	LDD  R26,Y+8
00018f 30a7      	CPI  R26,LOW(0x7)
000190 f010      	BRLO _0x2000010
000191 e0e6      	LDI  R30,LOW(6)
000192 87e8      	STD  Y+8,R30
                 _0x2000010:
000193 8518      	LDD  R17,Y+8
                 _0x2000011:
000194 2fe1      	MOV  R30,R17
000195 5011      	SUBI R17,1
000196 30e0      	CPI  R30,0
000197 f039      	BREQ _0x2000013
000198 940e 032d 	CALL SUBOPT_0x3
00019a 940e 0332 	CALL SUBOPT_0x4
00019c 940e 0339 	CALL SUBOPT_0x5
00019e cff5      	RJMP _0x2000011
                 _0x2000013:
00019f 940e 033e 	CALL SUBOPT_0x6
0001a1 940e 0416 	CALL __ADDF12
0001a3 940e 0321 	CALL SUBOPT_0x1
0001a5 e010      	LDI  R17,LOW(0)
                +
0001a6 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0001a7 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0001a8 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0001a9 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0001aa 940e 0339 	CALL SUBOPT_0x5
                 _0x2000014:
0001ac 940e 033e 	CALL SUBOPT_0x6
0001ae 940e 04f9 	CALL __CMPF12
0001b0 f088      	BRLO _0x2000016
0001b1 940e 032d 	CALL SUBOPT_0x3
0001b3 940e 0347 	CALL SUBOPT_0x7
0001b5 940e 0339 	CALL SUBOPT_0x5
0001b7 5f1f      	SUBI R17,-LOW(1)
0001b8 3217      	CPI  R17,39
0001b9 f038      	BRLO _0x2000017
0001ba 940e 031c 	CALL SUBOPT_0x0
                +
0001bc ecad     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
0001bd e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
0001be 940e 030f 	CALL _strcpyf
0001c0 c064      	RJMP _0x20A0005
                 _0x2000017:
0001c1 cfea      	RJMP _0x2000014
                 _0x2000016:
0001c2 3010      	CPI  R17,0
0001c3 f429      	BRNE _0x2000018
0001c4 940e 0326 	CALL SUBOPT_0x2
0001c6 e3e0      	LDI  R30,LOW(48)
0001c7 93ec      	ST   X,R30
0001c8 c02f      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
0001c9 2fe1      	MOV  R30,R17
0001ca 5011      	SUBI R17,1
0001cb 30e0      	CPI  R30,0
0001cc f159      	BREQ _0x200001C
0001cd 940e 032d 	CALL SUBOPT_0x3
0001cf 940e 0332 	CALL SUBOPT_0x4
                +
0001d1 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0001d2 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0001d3 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0001d4 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0001d5 940e 0416 	CALL __ADDF12
0001d7 01df      	MOVW R26,R30
0001d8 01cb      	MOVW R24,R22
0001d9 940e 02f8 	CALL _floor
0001db 940e 0339 	CALL SUBOPT_0x5
0001dd 940e 033e 	CALL SUBOPT_0x6
0001df 940e 04b4 	CALL __DIVF21
0001e1 940e 03a3 	CALL __CFD1U
0001e3 2f0e      	MOV  R16,R30
0001e4 940e 0326 	CALL SUBOPT_0x2
0001e6 2fe0      	MOV  R30,R16
0001e7 5de0      	SUBI R30,-LOW(48)
0001e8 93ec      	ST   X,R30
0001e9 2fe0      	MOV  R30,R16
0001ea e0f0      	LDI  R31,0
0001eb 940e 032d 	CALL SUBOPT_0x3
0001ed 940e 0527 	CALL __CWD1
0001ef 940e 03dc 	CALL __CDF1
0001f1 940e 0466 	CALL __MULF12
0001f3 940e 034e 	CALL SUBOPT_0x8
0001f5 940e 0353 	CALL SUBOPT_0x9
0001f7 cfd1      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
0001f8 85e8      	LDD  R30,Y+8
0001f9 30e0      	CPI  R30,0
0001fa f131      	BREQ _0x20A0004
0001fb 940e 0326 	CALL SUBOPT_0x2
0001fd e2ee      	LDI  R30,LOW(46)
0001fe 93ec      	ST   X,R30
                 _0x200001E:
0001ff 85e8      	LDD  R30,Y+8
000200 50e1      	SUBI R30,LOW(1)
000201 87e8      	STD  Y+8,R30
000202 5fef      	SUBI R30,-LOW(1)
000203 f0e9      	BREQ _0x2000020
000204 940e 034e 	CALL SUBOPT_0x8
000206 940e 0347 	CALL SUBOPT_0x7
000208 940e 0321 	CALL SUBOPT_0x1
                +
00020a 85e9     +LDD R30 , Y + 9
00020b 85fa     +LDD R31 , Y + 9 + 1
00020c 856b     +LDD R22 , Y + 9 + 2
00020d 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
00020e 940e 03a3 	CALL __CFD1U
000210 2f0e      	MOV  R16,R30
000211 940e 0326 	CALL SUBOPT_0x2
000213 2fe0      	MOV  R30,R16
000214 5de0      	SUBI R30,-LOW(48)
000215 93ec      	ST   X,R30
000216 2fe0      	MOV  R30,R16
000217 e0f0      	LDI  R31,0
000218 940e 034e 	CALL SUBOPT_0x8
00021a 940e 0527 	CALL __CWD1
00021c 940e 03dc 	CALL __CDF1
00021e 940e 0353 	CALL SUBOPT_0x9
000220 cfde      	RJMP _0x200001E
                 _0x2000020:
                 _0x20A0004:
000221 81ae      	LDD  R26,Y+6
000222 81bf      	LDD  R27,Y+6+1
000223 e0e0      	LDI  R30,LOW(0)
000224 93ec      	ST   X,R30
                 _0x20A0005:
000225 8119      	LDD  R17,Y+1
000226 8108      	LDD  R16,Y+0
000227 962d      	ADIW R28,13
000228 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000229 93aa      	ST   -Y,R26
00022a b3e8      	IN   R30,0x18
00022b 70ef      	ANDI R30,LOW(0xF)
00022c 2fae      	MOV  R26,R30
00022d 81e8      	LD   R30,Y
00022e 7fe0      	ANDI R30,LOW(0xF0)
00022f 2bea      	OR   R30,R26
000230 bbe8      	OUT  0x18,R30
                +
000231 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000232 958a     +DEC R24
000233 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000234 9ac2      	SBI  0x18,2
                +
000235 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000236 958a     +DEC R24
000237 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000238 98c2      	CBI  0x18,2
                +
000239 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00023a 958a     +DEC R24
00023b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00023c c088      	RJMP _0x20A0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00023d 93aa      	ST   -Y,R26
00023e 81a8      	LD   R26,Y
00023f dfe9      	RCALL __lcd_write_nibble_G101
000240 81e8          ld    r30,y
000241 95e2          swap  r30
000242 83e8          st    y,r30
000243 81a8      	LD   R26,Y
000244 dfe4      	RCALL __lcd_write_nibble_G101
                +
000245 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000246 958a     +DEC R24
000247 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000248 c07c      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000249 93aa      	ST   -Y,R26
00024a 81e8      	LD   R30,Y
00024b e0f0      	LDI  R31,0
00024c 53eb      	SUBI R30,LOW(-__base_y_G101)
00024d 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00024e 81e0      	LD   R30,Z
00024f 81a9      	LDD  R26,Y+1
000250 0fae      	ADD  R26,R30
000251 dfeb      	RCALL __lcd_write_data
000252 8059      	LDD  R5,Y+1
000253 8048      	LDD  R4,Y+0
000254 9622      	ADIW R28,2
000255 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000256 e0a2      	LDI  R26,LOW(2)
000257 940e 0358 	CALL SUBOPT_0xA
000259 e0ac      	LDI  R26,LOW(12)
00025a dfe2      	RCALL __lcd_write_data
00025b e0a1      	LDI  R26,LOW(1)
00025c 940e 0358 	CALL SUBOPT_0xA
00025e e0e0      	LDI  R30,LOW(0)
00025f 2e4e      	MOV  R4,R30
000260 2e5e      	MOV  R5,R30
000261 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000262 93aa      	ST   -Y,R26
000263 81a8      	LD   R26,Y
000264 30aa      	CPI  R26,LOW(0xA)
000265 f011      	BREQ _0x2020005
000266 1457      	CP   R5,R7
000267 f048      	BRLO _0x2020004
                 _0x2020005:
000268 e0e0      	LDI  R30,LOW(0)
000269 93ea      	ST   -Y,R30
00026a 9443      	INC  R4
00026b 2da4      	MOV  R26,R4
00026c dfdc      	RCALL _lcd_gotoxy
00026d 81a8      	LD   R26,Y
00026e 30aa      	CPI  R26,LOW(0xA)
00026f f409      	BRNE _0x2020007
000270 c054      	RJMP _0x20A0002
                 _0x2020007:
                 _0x2020004:
000271 9453      	INC  R5
000272 9ac0      	SBI  0x18,0
000273 81a8      	LD   R26,Y
000274 dfc8      	RCALL __lcd_write_data
000275 98c0      	CBI  0x18,0
000276 c04e      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000277 93ba      	ST   -Y,R27
000278 93aa      	ST   -Y,R26
000279 931a      	ST   -Y,R17
                 _0x2020008:
00027a 81a9      	LDD  R26,Y+1
00027b 81ba      	LDD  R27,Y+1+1
00027c 91ed      	LD   R30,X+
00027d 83a9      	STD  Y+1,R26
00027e 83ba      	STD  Y+1+1,R27
00027f 2f1e      	MOV  R17,R30
000280 30e0      	CPI  R30,0
000281 f019      	BREQ _0x202000A
000282 2fa1      	MOV  R26,R17
000283 dfde      	RCALL _lcd_putchar
000284 cff5      	RJMP _0x2020008
                 _0x202000A:
000285 c010      	RJMP _0x20A0003
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000286 93ba      	ST   -Y,R27
000287 93aa      	ST   -Y,R26
000288 931a      	ST   -Y,R17
                 _0x202000B:
000289 81e9      	LDD  R30,Y+1
00028a 81fa      	LDD  R31,Y+1+1
00028b 9631      	ADIW R30,1
00028c 83e9      	STD  Y+1,R30
00028d 83fa      	STD  Y+1+1,R31
00028e 9731      	SBIW R30,1
00028f 91e4      	LPM  R30,Z
000290 2f1e      	MOV  R17,R30
000291 30e0      	CPI  R30,0
000292 f019      	BREQ _0x202000D
000293 2fa1      	MOV  R26,R17
000294 dfcd      	RCALL _lcd_putchar
000295 cff3      	RJMP _0x202000B
                 _0x202000D:
                 _0x20A0003:
000296 8118      	LDD  R17,Y+0
000297 9623      	ADIW R28,3
000298 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000299 93aa      	ST   -Y,R26
00029a b3e7      	IN   R30,0x17
00029b 6fe0      	ORI  R30,LOW(0xF0)
00029c bbe7      	OUT  0x17,R30
00029d 9aba      	SBI  0x17,2
00029e 9ab8      	SBI  0x17,0
00029f 9ab9      	SBI  0x17,1
0002a0 98c2      	CBI  0x18,2
0002a1 98c0      	CBI  0x18,0
0002a2 98c1      	CBI  0x18,1
0002a3 8078      	LDD  R7,Y+0
0002a4 81e8      	LD   R30,Y
0002a5 58e0      	SUBI R30,-LOW(128)
                +
0002a6 93e0 02c7+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0002a8 81e8      	LD   R30,Y
0002a9 54e0      	SUBI R30,-LOW(192)
                +
0002aa 93e0 02c8+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0002ac e1a4      	LDI  R26,LOW(20)
0002ad e0b0      	LDI  R27,0
0002ae 940e 0366 	CALL _delay_ms
0002b0 940e 035e 	CALL SUBOPT_0xB
0002b2 940e 035e 	CALL SUBOPT_0xB
0002b4 940e 035e 	CALL SUBOPT_0xB
0002b6 e2a0      	LDI  R26,LOW(32)
0002b7 df71      	RCALL __lcd_write_nibble_G101
                +
0002b8 ec88     +LDI R24 , LOW ( 200 )
0002b9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002ba 9701     +SBIW R24 , 1
0002bb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002bc e2a8      	LDI  R26,LOW(40)
0002bd df7f      	RCALL __lcd_write_data
0002be e0a4      	LDI  R26,LOW(4)
0002bf df7d      	RCALL __lcd_write_data
0002c0 e8a5      	LDI  R26,LOW(133)
0002c1 df7b      	RCALL __lcd_write_data
0002c2 e0a6      	LDI  R26,LOW(6)
0002c3 df79      	RCALL __lcd_write_data
0002c4 df91      	RCALL _lcd_clear
                 _0x20A0002:
0002c5 9621      	ADIW R28,1
0002c6 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0002c7 940e 0540 	CALL __PUTPARD2
0002c9 817b         ldd  r23,y+3
0002ca 816a         ldd  r22,y+2
0002cb 81f9         ldd  r31,y+1
0002cc 81e8         ld   r30,y
0002cd fb77         bst  r23,7
0002ce 0f77         lsl  r23
0002cf fd67         sbrc r22,7
0002d0 6071         sbr  r23,1
0002d1 2f97         mov  r25,r23
0002d2 579e         subi r25,0x7e
0002d3 f081         breq __ftrunc0
0002d4 f078         brcs __ftrunc0
0002d5 3198         cpi  r25,24
0002d6 f490         brsh __ftrunc1
0002d7 27aa         clr  r26
0002d8 27bb         clr  r27
0002d9 2788         clr  r24
                 __ftrunc2:
0002da 9408         sec
0002db 9587         ror  r24
0002dc 95b7         ror  r27
0002dd 95a7         ror  r26
0002de 959a         dec  r25
0002df f7d1         brne __ftrunc2
0002e0 23ea         and  r30,r26
0002e1 23fb         and  r31,r27
0002e2 2368         and  r22,r24
0002e3 c005         rjmp __ftrunc1
                 __ftrunc0:
0002e4 94e8         clt
0002e5 2777         clr  r23
0002e6 27ee         clr  r30
0002e7 27ff         clr  r31
0002e8 2766         clr  r22
                 __ftrunc1:
0002e9 776f         cbr  r22,0x80
0002ea 9576         lsr  r23
0002eb f408         brcc __ftrunc3
0002ec 6860         sbr  r22,0x80
                 __ftrunc3:
0002ed f977         bld  r23,7
0002ee 91a9         ld   r26,y+
0002ef 91b9         ld   r27,y+
0002f0 9189         ld   r24,y+
0002f1 9199         ld   r25,y+
0002f2 17ea         cp   r30,r26
0002f3 07fb         cpc  r31,r27
0002f4 0768         cpc  r22,r24
0002f5 0779         cpc  r23,r25
0002f6 fb97         bst  r25,7
0002f7 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
0002f8 940e 0540 	CALL __PUTPARD2
0002fa 940e 0531 	CALL __GETD2S0
0002fc 940e 02c7 	CALL _ftrunc
0002fe 940e 0536 	CALL __PUTD1S0
000300 f419          brne __floor1
                 __floor0:
000301 940e 052c 	CALL __GETD1S0
000303 c009      	RJMP _0x20A0001
                 __floor1:
000304 f7e6          brtc __floor0
000305 940e 052c 	CALL __GETD1S0
                +
000307 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000308 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000309 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00030a e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00030b 940e 040f 	CALL __SUBF12
                 _0x20A0001:
00030d 9624      	ADIW R28,4
00030e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
00030f 93ba      	ST   -Y,R27
000310 93aa      	ST   -Y,R26
000311 91e9          ld   r30,y+
000312 91f9          ld   r31,y+
000313 91a9          ld   r26,y+
000314 91b9          ld   r27,y+
000315 01cd          movw r24,r26
                 strcpyf0:
000316 9005      	lpm  r0,z+
000317 920d          st   x+,r0
000318 2000          tst  r0
000319 f7e1          brne strcpyf0
00031a 01fc          movw r30,r24
00031b 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __seed_G100:
0002c1           	.BYTE 0x4
                 __base_y_G101:
0002c5           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00031c 81ee      	LDD  R30,Y+6
00031d 81ff      	LDD  R31,Y+6+1
00031e 93fa      	ST   -Y,R31
00031f 93ea      	ST   -Y,R30
000320 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
                +
000321 87e9     +STD Y + 9 , R30
000322 87fa     +STD Y + 9 + 1 , R31
000323 876b     +STD Y + 9 + 2 , R22
000324 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000325 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
000326 81ae      	LDD  R26,Y+6
000327 81bf      	LDD  R27,Y+6+1
000328 9611      	ADIW R26,1
000329 83ae      	STD  Y+6,R26
00032a 83bf      	STD  Y+6+1,R27
00032b 9711      	SBIW R26,1
00032c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
                +
00032d 81aa     +LDD R26 , Y + 2
00032e 81bb     +LDD R27 , Y + 2 + 1
00032f 818c     +LDD R24 , Y + 2 + 2
000330 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000331 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
                +
000332 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000333 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000334 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000335 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000336 940e 0466 	CALL __MULF12
000338 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
                +
000339 83ea     +STD Y + 2 , R30
00033a 83fb     +STD Y + 2 + 1 , R31
00033b 836c     +STD Y + 2 + 2 , R22
00033c 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00033d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
                +
00033e 81ea     +LDD R30 , Y + 2
00033f 81fb     +LDD R31 , Y + 2 + 1
000340 816c     +LDD R22 , Y + 2 + 2
000341 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000342 85a9     +LDD R26 , Y + 9
000343 85ba     +LDD R27 , Y + 9 + 1
000344 858b     +LDD R24 , Y + 9 + 2
000345 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000346 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
                +
000347 e0e0     +LDI R30 , LOW ( 0x41200000 )
000348 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000349 e260     +LDI R22 , BYTE3 ( 0x41200000 )
00034a e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
00034b 940e 0466 	CALL __MULF12
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
00034e 85a9     +LDD R26 , Y + 9
00034f 85ba     +LDD R27 , Y + 9 + 1
000350 858b     +LDD R24 , Y + 9 + 2
000351 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000353 940e 0545 	CALL __SWAPD12
000355 940e 040f 	CALL __SUBF12
000357 cfc9      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000358 940e 023d 	CALL __lcd_write_data
00035a e0a3      	LDI  R26,LOW(3)
00035b e0b0      	LDI  R27,0
00035c 940c 0366 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
00035e e3a0      	LDI  R26,LOW(48)
00035f 940e 0229 	CALL __lcd_write_nibble_G101
                +
000361 ec88     +LDI R24 , LOW ( 200 )
000362 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000363 9701     +SBIW R24 , 1
000364 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000365 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000366 9610      	adiw r26,0
000367 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000368 ed80     +LDI R24 , LOW ( 0x7D0 )
000369 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00036a 9701     +SBIW R24 , 1
00036b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00036c 95a8      	wdr
00036d 9711      	sbiw r26,1
00036e f7c9      	brne __delay_ms0
                 __delay_ms1:
00036f 9508      	ret
                 
                 __ANEGF1:
000370 9730      	SBIW R30,0
000371 4060      	SBCI R22,0
000372 4070      	SBCI R23,0
000373 f009      	BREQ __ANEGF10
000374 5870      	SUBI R23,0x80
                 __ANEGF10:
000375 9508      	RET
                 
                 __ROUND_REPACK:
000376 2355      	TST  R21
000377 f442      	BRPL __REPACK
000378 3850      	CPI  R21,0x80
000379 f411      	BRNE __ROUND_REPACK0
00037a ffe0      	SBRS R30,0
00037b c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00037c 9631      	ADIW R30,1
00037d 1f69      	ADC  R22,R25
00037e 1f79      	ADC  R23,R25
00037f f06b      	BRVS __REPACK1
                 
                 __REPACK:
000380 e850      	LDI  R21,0x80
000381 2757      	EOR  R21,R23
000382 f411      	BRNE __REPACK0
000383 935f      	PUSH R21
000384 c0cf      	RJMP __ZERORES
                 __REPACK0:
000385 3f5f      	CPI  R21,0xFF
000386 f031      	BREQ __REPACK1
000387 0f66      	LSL  R22
000388 0c00      	LSL  R0
000389 9557      	ROR  R21
00038a 9567      	ROR  R22
00038b 2f75      	MOV  R23,R21
00038c 9508      	RET
                 __REPACK1:
00038d 935f      	PUSH R21
00038e 2000      	TST  R0
00038f f00a      	BRMI __REPACK2
000390 c0cf      	RJMP __MAXRES
                 __REPACK2:
000391 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000392 e850      	LDI  R21,0x80
000393 2e19      	MOV  R1,R25
000394 2215      	AND  R1,R21
000395 0f88      	LSL  R24
000396 1f99      	ROL  R25
000397 2795      	EOR  R25,R21
000398 0f55      	LSL  R21
000399 9587      	ROR  R24
                 
                 __UNPACK1:
00039a e850      	LDI  R21,0x80
00039b 2e07      	MOV  R0,R23
00039c 2205      	AND  R0,R21
00039d 0f66      	LSL  R22
00039e 1f77      	ROL  R23
00039f 2775      	EOR  R23,R21
0003a0 0f55      	LSL  R21
0003a1 9567      	ROR  R22
0003a2 9508      	RET
                 
                 __CFD1U:
0003a3 9468      	SET
0003a4 c001      	RJMP __CFD1U0
                 __CFD1:
0003a5 94e8      	CLT
                 __CFD1U0:
0003a6 935f      	PUSH R21
0003a7 dff2      	RCALL __UNPACK1
0003a8 3870      	CPI  R23,0x80
0003a9 f018      	BRLO __CFD10
0003aa 3f7f      	CPI  R23,0xFF
0003ab f408      	BRCC __CFD10
0003ac c0a7      	RJMP __ZERORES
                 __CFD10:
0003ad e156      	LDI  R21,22
0003ae 1b57      	SUB  R21,R23
0003af f4aa      	BRPL __CFD11
0003b0 9551      	NEG  R21
0003b1 3058      	CPI  R21,8
0003b2 f40e      	BRTC __CFD19
0003b3 3059      	CPI  R21,9
                 __CFD19:
0003b4 f030      	BRLO __CFD17
0003b5 efef      	SER  R30
0003b6 efff      	SER  R31
0003b7 ef6f      	SER  R22
0003b8 e77f      	LDI  R23,0x7F
0003b9 f977      	BLD  R23,7
0003ba c01a      	RJMP __CFD15
                 __CFD17:
0003bb 2777      	CLR  R23
0003bc 2355      	TST  R21
0003bd f0b9      	BREQ __CFD15
                 __CFD18:
0003be 0fee      	LSL  R30
0003bf 1fff      	ROL  R31
0003c0 1f66      	ROL  R22
0003c1 1f77      	ROL  R23
0003c2 955a      	DEC  R21
0003c3 f7d1      	BRNE __CFD18
0003c4 c010      	RJMP __CFD15
                 __CFD11:
0003c5 2777      	CLR  R23
                 __CFD12:
0003c6 3058      	CPI  R21,8
0003c7 f028      	BRLO __CFD13
0003c8 2fef      	MOV  R30,R31
0003c9 2ff6      	MOV  R31,R22
0003ca 2f67      	MOV  R22,R23
0003cb 5058      	SUBI R21,8
0003cc cff9      	RJMP __CFD12
                 __CFD13:
0003cd 2355      	TST  R21
0003ce f031      	BREQ __CFD15
                 __CFD14:
0003cf 9576      	LSR  R23
0003d0 9567      	ROR  R22
0003d1 95f7      	ROR  R31
0003d2 95e7      	ROR  R30
0003d3 955a      	DEC  R21
0003d4 f7d1      	BRNE __CFD14
                 __CFD15:
0003d5 2000      	TST  R0
0003d6 f40a      	BRPL __CFD16
0003d7 d141      	RCALL __ANEGD1
                 __CFD16:
0003d8 915f      	POP  R21
0003d9 9508      	RET
                 
                 __CDF1U:
0003da 9468      	SET
0003db c001      	RJMP __CDF1U0
                 __CDF1:
0003dc 94e8      	CLT
                 __CDF1U0:
0003dd 9730      	SBIW R30,0
0003de 4060      	SBCI R22,0
0003df 4070      	SBCI R23,0
0003e0 f0b1      	BREQ __CDF10
0003e1 2400      	CLR  R0
0003e2 f026      	BRTS __CDF11
0003e3 2377      	TST  R23
0003e4 f412      	BRPL __CDF11
0003e5 9400      	COM  R0
0003e6 d132      	RCALL __ANEGD1
                 __CDF11:
0003e7 2e17      	MOV  R1,R23
0003e8 e17e      	LDI  R23,30
0003e9 2011      	TST  R1
                 __CDF12:
0003ea f032      	BRMI __CDF13
0003eb 957a      	DEC  R23
0003ec 0fee      	LSL  R30
0003ed 1fff      	ROL  R31
0003ee 1f66      	ROL  R22
0003ef 1c11      	ROL  R1
0003f0 cff9      	RJMP __CDF12
                 __CDF13:
0003f1 2fef      	MOV  R30,R31
0003f2 2ff6      	MOV  R31,R22
0003f3 2d61      	MOV  R22,R1
0003f4 935f      	PUSH R21
0003f5 df8a      	RCALL __REPACK
0003f6 915f      	POP  R21
                 __CDF10:
0003f7 9508      	RET
                 
                 __SWAPACC:
0003f8 934f      	PUSH R20
0003f9 01af      	MOVW R20,R30
0003fa 01fd      	MOVW R30,R26
0003fb 01da      	MOVW R26,R20
0003fc 01ab      	MOVW R20,R22
0003fd 01bc      	MOVW R22,R24
0003fe 01ca      	MOVW R24,R20
0003ff 2d40      	MOV  R20,R0
000400 2c01      	MOV  R0,R1
000401 2e14      	MOV  R1,R20
000402 914f      	POP  R20
000403 9508      	RET
                 
                 __UADD12:
000404 0fea      	ADD  R30,R26
000405 1ffb      	ADC  R31,R27
000406 1f68      	ADC  R22,R24
000407 9508      	RET
                 
                 __NEGMAN1:
000408 95e0      	COM  R30
000409 95f0      	COM  R31
00040a 9560      	COM  R22
00040b 5fef      	SUBI R30,-1
00040c 4fff      	SBCI R31,-1
00040d 4f6f      	SBCI R22,-1
00040e 9508      	RET
                 
                 __SUBF12:
00040f 935f      	PUSH R21
000410 df81      	RCALL __UNPACK
000411 3890      	CPI  R25,0x80
000412 f171      	BREQ __ADDF129
000413 e850      	LDI  R21,0x80
000414 2615      	EOR  R1,R21
                 
000415 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000416 935f      	PUSH R21
000417 df7a      	RCALL __UNPACK
000418 3890      	CPI  R25,0x80
000419 f139      	BREQ __ADDF129
                 
                 __ADDF120:
00041a 3870      	CPI  R23,0x80
00041b f121      	BREQ __ADDF128
                 __ADDF121:
00041c 2f57      	MOV  R21,R23
00041d 1b59      	SUB  R21,R25
00041e f12b      	BRVS __ADDF1211
00041f f412      	BRPL __ADDF122
000420 dfd7      	RCALL __SWAPACC
000421 cffa      	RJMP __ADDF121
                 __ADDF122:
000422 3158      	CPI  R21,24
000423 f018      	BRLO __ADDF123
000424 27aa      	CLR  R26
000425 27bb      	CLR  R27
000426 2788      	CLR  R24
                 __ADDF123:
000427 3058      	CPI  R21,8
000428 f028      	BRLO __ADDF124
000429 2fab      	MOV  R26,R27
00042a 2fb8      	MOV  R27,R24
00042b 2788      	CLR  R24
00042c 5058      	SUBI R21,8
00042d cff9      	RJMP __ADDF123
                 __ADDF124:
00042e 2355      	TST  R21
00042f f029      	BREQ __ADDF126
                 __ADDF125:
000430 9586      	LSR  R24
000431 95b7      	ROR  R27
000432 95a7      	ROR  R26
000433 955a      	DEC  R21
000434 f7d9      	BRNE __ADDF125
                 __ADDF126:
000435 2d50      	MOV  R21,R0
000436 2551      	EOR  R21,R1
000437 f072      	BRMI __ADDF127
000438 dfcb      	RCALL __UADD12
000439 f438      	BRCC __ADDF129
00043a 9567      	ROR  R22
00043b 95f7      	ROR  R31
00043c 95e7      	ROR  R30
00043d 9573      	INC  R23
00043e f413      	BRVC __ADDF129
00043f c020      	RJMP __MAXRES
                 __ADDF128:
000440 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000441 df3e      	RCALL __REPACK
000442 915f      	POP  R21
000443 9508      	RET
                 __ADDF1211:
000444 f7d8      	BRCC __ADDF128
000445 cffb      	RJMP __ADDF129
                 __ADDF127:
000446 1bea      	SUB  R30,R26
000447 0bfb      	SBC  R31,R27
000448 0b68      	SBC  R22,R24
000449 f051      	BREQ __ZERORES
00044a f410      	BRCC __ADDF1210
00044b 9400      	COM  R0
00044c dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00044d 2366      	TST  R22
00044e f392      	BRMI __ADDF129
00044f 0fee      	LSL  R30
000450 1fff      	ROL  R31
000451 1f66      	ROL  R22
000452 957a      	DEC  R23
000453 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000454 27ee      	CLR  R30
000455 27ff      	CLR  R31
000456 2766      	CLR  R22
000457 2777      	CLR  R23
000458 915f      	POP  R21
000459 9508      	RET
                 
                 __MINRES:
00045a efef      	SER  R30
00045b efff      	SER  R31
00045c e76f      	LDI  R22,0x7F
00045d ef7f      	SER  R23
00045e 915f      	POP  R21
00045f 9508      	RET
                 
                 __MAXRES:
000460 efef      	SER  R30
000461 efff      	SER  R31
000462 e76f      	LDI  R22,0x7F
000463 e77f      	LDI  R23,0x7F
000464 915f      	POP  R21
000465 9508      	RET
                 
                 __MULF12:
000466 935f      	PUSH R21
000467 df2a      	RCALL __UNPACK
000468 3870      	CPI  R23,0x80
000469 f351      	BREQ __ZERORES
00046a 3890      	CPI  R25,0x80
00046b f341      	BREQ __ZERORES
00046c 2401      	EOR  R0,R1
00046d 9408      	SEC
00046e 1f79      	ADC  R23,R25
00046f f423      	BRVC __MULF124
000470 f31c      	BRLT __ZERORES
                 __MULF125:
000471 2000      	TST  R0
000472 f33a      	BRMI __MINRES
000473 cfec      	RJMP __MAXRES
                 __MULF124:
000474 920f      	PUSH R0
000475 931f      	PUSH R17
000476 932f      	PUSH R18
000477 933f      	PUSH R19
000478 934f      	PUSH R20
000479 2711      	CLR  R17
00047a 2722      	CLR  R18
00047b 2799      	CLR  R25
00047c 9f68      	MUL  R22,R24
00047d 01a0      	MOVW R20,R0
00047e 9f8f      	MUL  R24,R31
00047f 2d30      	MOV  R19,R0
000480 0d41      	ADD  R20,R1
000481 1f59      	ADC  R21,R25
000482 9f6b      	MUL  R22,R27
000483 0d30      	ADD  R19,R0
000484 1d41      	ADC  R20,R1
000485 1f59      	ADC  R21,R25
000486 9f8e      	MUL  R24,R30
000487 d027      	RCALL __MULF126
000488 9fbf      	MUL  R27,R31
000489 d025      	RCALL __MULF126
00048a 9f6a      	MUL  R22,R26
00048b d023      	RCALL __MULF126
00048c 9fbe      	MUL  R27,R30
00048d d01d      	RCALL __MULF127
00048e 9faf      	MUL  R26,R31
00048f d01b      	RCALL __MULF127
000490 9fae      	MUL  R26,R30
000491 0d11      	ADD  R17,R1
000492 1f29      	ADC  R18,R25
000493 1f39      	ADC  R19,R25
000494 1f49      	ADC  R20,R25
000495 1f59      	ADC  R21,R25
000496 2fe3      	MOV  R30,R19
000497 2ff4      	MOV  R31,R20
000498 2f65      	MOV  R22,R21
000499 2f52      	MOV  R21,R18
00049a 914f      	POP  R20
00049b 913f      	POP  R19
00049c 912f      	POP  R18
00049d 911f      	POP  R17
00049e 900f      	POP  R0
00049f 2366      	TST  R22
0004a0 f02a      	BRMI __MULF122
0004a1 0f55      	LSL  R21
0004a2 1fee      	ROL  R30
0004a3 1fff      	ROL  R31
0004a4 1f66      	ROL  R22
0004a5 c002      	RJMP __MULF123
                 __MULF122:
0004a6 9573      	INC  R23
0004a7 f24b      	BRVS __MULF125
                 __MULF123:
0004a8 decd      	RCALL __ROUND_REPACK
0004a9 915f      	POP  R21
0004aa 9508      	RET
                 
                 __MULF127:
0004ab 0d10      	ADD  R17,R0
0004ac 1d21      	ADC  R18,R1
0004ad 1f39      	ADC  R19,R25
0004ae c002      	RJMP __MULF128
                 __MULF126:
0004af 0d20      	ADD  R18,R0
0004b0 1d31      	ADC  R19,R1
                 __MULF128:
0004b1 1f49      	ADC  R20,R25
0004b2 1f59      	ADC  R21,R25
0004b3 9508      	RET
                 
                 __DIVF21:
0004b4 935f      	PUSH R21
0004b5 dedc      	RCALL __UNPACK
0004b6 3870      	CPI  R23,0x80
0004b7 f421      	BRNE __DIVF210
0004b8 2011      	TST  R1
                 __DIVF211:
0004b9 f40a      	BRPL __DIVF219
0004ba cf9f      	RJMP __MINRES
                 __DIVF219:
0004bb cfa4      	RJMP __MAXRES
                 __DIVF210:
0004bc 3890      	CPI  R25,0x80
0004bd f409      	BRNE __DIVF218
                 __DIVF217:
0004be cf95      	RJMP __ZERORES
                 __DIVF218:
0004bf 2401      	EOR  R0,R1
0004c0 9408      	SEC
0004c1 0b97      	SBC  R25,R23
0004c2 f41b      	BRVC __DIVF216
0004c3 f3d4      	BRLT __DIVF217
0004c4 2000      	TST  R0
0004c5 cff3      	RJMP __DIVF211
                 __DIVF216:
0004c6 2f79      	MOV  R23,R25
0004c7 931f      	PUSH R17
0004c8 932f      	PUSH R18
0004c9 933f      	PUSH R19
0004ca 934f      	PUSH R20
0004cb 2411      	CLR  R1
0004cc 2711      	CLR  R17
0004cd 2722      	CLR  R18
0004ce 2733      	CLR  R19
0004cf 2744      	CLR  R20
0004d0 2755      	CLR  R21
0004d1 e290      	LDI  R25,32
                 __DIVF212:
0004d2 17ae      	CP   R26,R30
0004d3 07bf      	CPC  R27,R31
0004d4 0786      	CPC  R24,R22
0004d5 0741      	CPC  R20,R17
0004d6 f030      	BRLO __DIVF213
0004d7 1bae      	SUB  R26,R30
0004d8 0bbf      	SBC  R27,R31
0004d9 0b86      	SBC  R24,R22
0004da 0b41      	SBC  R20,R17
0004db 9408      	SEC
0004dc c001      	RJMP __DIVF214
                 __DIVF213:
0004dd 9488      	CLC
                 __DIVF214:
0004de 1f55      	ROL  R21
0004df 1f22      	ROL  R18
0004e0 1f33      	ROL  R19
0004e1 1c11      	ROL  R1
0004e2 1faa      	ROL  R26
0004e3 1fbb      	ROL  R27
0004e4 1f88      	ROL  R24
0004e5 1f44      	ROL  R20
0004e6 959a      	DEC  R25
0004e7 f751      	BRNE __DIVF212
0004e8 01f9      	MOVW R30,R18
0004e9 2d61      	MOV  R22,R1
0004ea 914f      	POP  R20
0004eb 913f      	POP  R19
0004ec 912f      	POP  R18
0004ed 911f      	POP  R17
0004ee 2366      	TST  R22
0004ef f032      	BRMI __DIVF215
0004f0 0f55      	LSL  R21
0004f1 1fee      	ROL  R30
0004f2 1fff      	ROL  R31
0004f3 1f66      	ROL  R22
0004f4 957a      	DEC  R23
0004f5 f243      	BRVS __DIVF217
                 __DIVF215:
0004f6 de7f      	RCALL __ROUND_REPACK
0004f7 915f      	POP  R21
0004f8 9508      	RET
                 
                 __CMPF12:
0004f9 2399      	TST  R25
0004fa f09a      	BRMI __CMPF120
0004fb 2377      	TST  R23
0004fc f042      	BRMI __CMPF121
0004fd 1797      	CP   R25,R23
0004fe f048      	BRLO __CMPF122
0004ff f429      	BRNE __CMPF121
000500 17ae      	CP   R26,R30
000501 07bf      	CPC  R27,R31
000502 0786      	CPC  R24,R22
000503 f020      	BRLO __CMPF122
000504 f031      	BREQ __CMPF123
                 __CMPF121:
000505 9498      	CLZ
000506 9488      	CLC
000507 9508      	RET
                 __CMPF122:
000508 9498      	CLZ
000509 9408      	SEC
00050a 9508      	RET
                 __CMPF123:
00050b 9418      	SEZ
00050c 9488      	CLC
00050d 9508      	RET
                 __CMPF120:
00050e 2377      	TST  R23
00050f f7c2      	BRPL __CMPF122
000510 1797      	CP   R25,R23
000511 f398      	BRLO __CMPF121
000512 f7a9      	BRNE __CMPF122
000513 17ea      	CP   R30,R26
000514 07fb      	CPC  R31,R27
000515 0768      	CPC  R22,R24
000516 f388      	BRLO __CMPF122
000517 f399      	BREQ __CMPF123
000518 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
000519 95f0      	COM  R31
00051a 9560      	COM  R22
00051b 9570      	COM  R23
00051c 95e1      	NEG  R30
00051d 4fff      	SBCI R31,-1
00051e 4f6f      	SBCI R22,-1
00051f 4f7f      	SBCI R23,-1
000520 9508      	RET
                 
                 __CBD1:
000521 2ffe      	MOV  R31,R30
000522 0fff      	ADD  R31,R31
000523 0bff      	SBC  R31,R31
000524 2f6f      	MOV  R22,R31
000525 2f7f      	MOV  R23,R31
000526 9508      	RET
                 
                 __CWD1:
000527 2f6f      	MOV  R22,R31
000528 0f66      	ADD  R22,R22
000529 0b66      	SBC  R22,R22
00052a 2f76      	MOV  R23,R22
00052b 9508      	RET
                 
                 __GETD1S0:
00052c 81e8      	LD   R30,Y
00052d 81f9      	LDD  R31,Y+1
00052e 816a      	LDD  R22,Y+2
00052f 817b      	LDD  R23,Y+3
000530 9508      	RET
                 
                 __GETD2S0:
000531 81a8      	LD   R26,Y
000532 81b9      	LDD  R27,Y+1
000533 818a      	LDD  R24,Y+2
000534 819b      	LDD  R25,Y+3
000535 9508      	RET
                 
                 __PUTD1S0:
000536 83e8      	ST   Y,R30
000537 83f9      	STD  Y+1,R31
000538 836a      	STD  Y+2,R22
000539 837b      	STD  Y+3,R23
00053a 9508      	RET
                 
                 __PUTPARD1:
00053b 937a      	ST   -Y,R23
00053c 936a      	ST   -Y,R22
00053d 93fa      	ST   -Y,R31
00053e 93ea      	ST   -Y,R30
00053f 9508      	RET
                 
                 __PUTPARD2:
000540 939a      	ST   -Y,R25
000541 938a      	ST   -Y,R24
000542 93ba      	ST   -Y,R27
000543 93aa      	ST   -Y,R26
000544 9508      	RET
                 
                 __SWAPD12:
000545 2e18      	MOV  R1,R24
000546 2f86      	MOV  R24,R22
000547 2d61      	MOV  R22,R1
000548 2e19      	MOV  R1,R25
000549 2f97      	MOV  R25,R23
00054a 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00054b 2e1b      	MOV  R1,R27
00054c 2fbf      	MOV  R27,R31
00054d 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00054e 2e1a      	MOV  R1,R26
00054f 2fae      	MOV  R26,R30
000550 2de1      	MOV  R30,R1
000551 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  29 r1 :  30 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:  28 r18:  12 r19:  12 r20:  22 r21:  63 r22:  77 r23:  72 
r24:  59 r25:  50 r26: 107 r27:  56 r28:  10 r29:   1 r30: 208 r31:  82 
x  :  11 y  : 165 z  :  10 
Registers used: 24 out of 35 (68.6%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   9 
adiw  :  10 and   :   5 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   1 break :   0 breq  :  24 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   2 brmi  :   9 brne  :  29 brpl  :   8 brsh  :   1 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   2 call  :  81 
cbi   :   5 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  32 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :   7 cpc   :  12 cpi   :  29 cpse  :   0 dec   :  14 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   4 jmp   :  25 ld    :  25 ldd   :  68 ldi   : 126 
lds   :   0 lpm   :  10 lsl   :  12 lsr   :   3 mov   :  58 movw  :  17 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   2 out   :  43 pop   :  18 push  :  18 rcall :  41 ret   :  48 
reti  :   0 rjmp  :  47 rol   :  24 ror   :  15 sbc   :   8 sbci  :  10 
sbi   :   7 sbic  :   0 sbis  :   1 sbiw  :  13 sbr   :   2 sbrc  :   1 
sbrs  :   1 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  54 std   :  30 sts   :   2 sub   :   4 subi  :  15 swap  :   1 
tst   :  19 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000aa4   2534    190   2724   32768   8.3%
[.dseg] 0x000060 0x0002c9      0    105    105    2048   5.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
